Beginner (Basic Syntax, Variables, Functions, Loops, Conditionals)
Hello, World!

Write a Go program that prints "Hello, World!" to the console.

Swap Two Variables

Swap two variables without using a third variable.

Check Even or Odd

Write a function to check if a number is even or odd.

Find the Largest of Three Numbers

Given three numbers, determine the largest.

Simple Calculator

Implement a simple calculator that performs addition, subtraction, multiplication, and division.

Sum of Digits

Write a function that calculates the sum of digits of a given number.

Factorial using Recursion

Implement a function to compute the factorial of a number using recursion.

Check Prime Number

Write a function to determine if a number is prime.

Reverse a String

Reverse a string without using built-in functions.

Fibonacci Series

Print the Fibonacci series up to n terms.

Intermediate (Structs, Interfaces, Goroutines, Channels, File Handling)
Implement a Struct for a Car

Create a Car struct with fields like Brand, Model, and Year. Write a method to print car details.

Interfaces: Shape Area Calculation

Define an interface Shape with a method Area(). Implement Rectangle and Circle structs that satisfy the interface.

Goroutine to Print Numbers

Write a Goroutine that prints numbers from 1 to 10 while the main function prints letters A to J concurrently.

Buffered and Unbuffered Channels

Demonstrate the difference between buffered and unbuffered channels using an example.

Producer-Consumer Problem using Channels

Implement a producer-consumer pattern using Goroutines and channels.

Read and Write to a File

Write a program to create a file, write some text, and then read from it.

JSON Encoding and Decoding

Convert a Go struct into JSON and decode JSON back into a struct.

Error Handling in Go

Implement custom error handling using errors.New and fmt.Errorf.

Sort a Slice of Integers

Write a program that sorts a slice of integers in ascending order.

HTTP Server in Go

Create a simple HTTP server that handles GET and POST requests.

Advanced (Concurrency, Context, Reflection, Generics, System Design)
Concurrent Web Scraper

Implement a web scraper that fetches data from multiple websites concurrently using Goroutines.

Worker Pool using Goroutines

Create a worker pool where multiple workers process tasks from a queue concurrently.

Context with Timeout and Cancellation

Write a program demonstrating context.WithTimeout and context.WithCancel.

Rate Limiting using Go Channels

Implement a rate limiter using Go channels and time.Sleep.

Build a REST API using Gin

Create a simple REST API with CRUD operations using the gin-gonic framework.

Reflection in Go

Write a program that inspects the type and value of different variables using reflection.

Implement a Middleware in Go

Create a middleware function that logs all incoming HTTP requests.

Build a Microservice with gRPC

Implement a gRPC-based microservice with Go.

Implement a Pub-Sub System using Channels

Design a basic pub-sub system where multiple subscribers listen for messages.

Event-Driven Architecture with Kafka

Integrate Go with Apache Kafka to build an event-driven system.

Expert (Distributed Systems, Performance Optimization, Low-Level Concepts)
Custom Memory Allocator in Go

Implement a simple memory allocator using slices and pointers.

Blockchain Implementation in Go

Build a basic blockchain system with proof-of-work in Go.

Build a Distributed Key-Value Store

Design a distributed key-value store using Goâ€™s net package.

Custom Load Balancer in Go

Implement a load balancer that distributes requests among multiple backend servers.

Implement a Cache with LRU Eviction Policy

Build a least recently used (LRU) cache using Go maps and linked lists.

Write a WebAssembly (WASM) Module in Go

Create a WASM module in Go and run it in a browser.

Implement Paxos or Raft Consensus Algorithm

Design a consensus algorithm for distributed systems.

Profiling and Optimizing Go Code

Use pprof to profile and optimize a slow Go program.

Implement a Proxy Server in Go

Write a reverse proxy server that forwards requests to different backend services.

Build a Full-fledged Microservices Architecture