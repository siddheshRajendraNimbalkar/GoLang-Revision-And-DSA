âœ… Phase 1: Basics
ðŸ“˜ Concepts Covered:
Variables, Constants

Data Types

Conditionals, Loops

Arrays, Slices, Maps

Functions

ðŸ§ª Tasks:
Define a Student struct with ID, Name, Age, Email.

Write a function to add a student.

Write a function to list all students.

Use slices to store students in memory.

Implement CLI using fmt.Scanln to take input.

âœ… Phase 2: Intermediate
ðŸ“˜ Concepts Covered:
Structs & Methods

Interfaces

Error Handling

Custom Packages

File I/O (JSON)

ðŸ§ª Tasks:
Create Course struct with CourseID, Name, Credits.

Create a map of StudentID to []CourseID for enrollment.

Save/load student data to/from JSON file.

Create custom error types (e.g., for duplicate student).

Modularize code using packages (students, courses, utils).

âœ… Phase 3: Advanced
ðŸ“˜ Concepts Covered:
Goroutines

Channels

Mutex (sync)

Go Modules

REST API (optional)

Database Integration (PostgreSQL or SQLite)

Testing (Unit tests using testing package)

ðŸ§ª Tasks:
Add goroutine to load data from JSON files concurrently.

Use a mutex to avoid data race when adding students.

Replace JSON storage with PostgreSQL or SQLite (use gorm or sql package).

(Optional) Build a REST API using net/http or Gin.

Write unit tests for student creation and enrollment.

